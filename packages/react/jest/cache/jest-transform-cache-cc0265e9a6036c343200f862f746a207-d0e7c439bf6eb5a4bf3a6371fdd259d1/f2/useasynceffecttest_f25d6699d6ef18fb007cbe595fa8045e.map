{"file":"/Users/jiangwei/projects/lotips/packages/react/test/use-async-effect.test.tsx","mappings":";;;AAAA,qDAAmD;AACnD,4DAA8D;AAC9D,4DAAwD;AACxD,wCAAsC;AAEtC,IAAM,kBAAkB,GAAG,eAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;AAEjD,QAAQ,CAAC,kBAAkB,EAAE;IAC3B,IAAI,CAAC,0BAA0B,EAAE;;;;;oBACzB,eAAe,GAAG;wBACtB,IAAM,KAAK,GAAG,kBAAU,CAAC,kBAAkB,CAAC,CAAA;wBAC5C,OAAO;4BACL,KAAK,OAAA;yBACN,CAAA;oBACH,CAAC,CAAA;oBACK,mBAAmB,GAAG,UAAC,EAAY;4BAAV,sBAAQ;wBAC/B,IAAA,wBAA+B,EAA9B,aAAK,EAAE,gBAAuB,CAAA;wBACrC,iCAAc,CAAC;;;4CACb,qBAAM,aAAK,CAAC,IAAI,CAAC,EAAA;;wCAAjB,SAAiB,CAAA;wCACjB,QAAQ,CAAC,CAAC,CAAC,CAAA;;;;6BACZ,EAAE,EAAE,CAAC,CAAA;wBACN,OAAO,8BAAC,kBAAkB,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,IAAG,QAAQ,CAA+B,CAAA;oBAC5F,CAAC,CAAA;oBACK,IAAI,GAAG,wBAAU,CAAC,cAAM,OAAA,eAAe,EAAE,EAAjB,CAAiB,EAAE,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC,CAAA;oBAClF,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;oBAA9B,SAA8B,CAAA;oBAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;;;;SAC1C,CAAC,CAAA;IAEF,IAAI,CAAC,gCAAgC,EAAE;;;;;oBACjC,OAAO,GAAG,CAAC,CAAA;oBACT,eAAe,GAAG;wBAChB,IAAA,uBAA8B,EAA7B,aAAK,EAAE,gBAAsB,CAAA;wBACpC,iCAAc,CAAC;;gCACb,sBAAO;wCACL,OAAO,IAAI,CAAC,CAAA;oCACd,CAAC,EAAA;;6BACF,EAAE,EAAE,CAAC,CAAA;wBACN,OAAO;4BACL,KAAK,OAAA;4BACL,QAAQ,UAAA;yBACT,CAAA;oBACH,CAAC,CAAA;oBACO,OAAO,GAAK,wBAAU,CAAC,cAAM,OAAA,eAAe,EAAE,EAAjB,CAAiB,CAAC,QAAxC,CAAwC;oBACvD,qBAAM,aAAK,CAAC,IAAI,CAAC,EAAA;;oBAAjB,SAAiB,CAAA;oBACjB,iBAAG,CAAC;wBACF,OAAO,EAAE,CAAA;oBACX,CAAC,CAAC,CAAA;oBACF,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;;;;SACxB,EAAE,IAAI,CAAC,CAAA;AACV,CAAC,CAAC,CAAA","names":[],"sources":["/Users/jiangwei/projects/lotips/packages/react/test/use-async-effect.test.tsx"],"sourcesContent":["import React, { useState, useContext } from 'react'\nimport { renderHook, act } from '@testing-library/react-hooks'\nimport { useAsyncEffect } from '../src/use-async-effect'\nimport { delay } from '../utils/delay'\n\nconst AsyncEffectContext = React.createContext(1)\n\ndescribe('use-async-effect', () => {\n  test('work with async function', async () => {\n    const _useAsyncEffect = () => {\n      const value = useContext(AsyncEffectContext)\n      return {\n        value,\n      }\n    }\n    const AsyncEffectProvider = ({ children }) => {\n      const [value, setValue] = useState(1)\n      useAsyncEffect(async () => {\n        await delay(1000)\n        setValue(2)\n      }, [])\n      return <AsyncEffectContext.Provider value={value}>{children}</AsyncEffectContext.Provider>\n    }\n    const hook = renderHook(() => _useAsyncEffect(), { wrapper: AsyncEffectProvider })\n    await hook.waitForNextUpdate()\n    expect(hook.result.current.value).toBe(2)\n  })\n\n  test('clear function shoud work fine', async () => {\n    let reseted = 0\n    const _useAsyncEffect = () => {\n      const [value, setValue] = useState()\n      useAsyncEffect(async () => {\n        return () => {\n          reseted += 1\n        }\n      }, [])\n      return {\n        value,\n        setValue,\n      }\n    }\n    const { unmount } = renderHook(() => _useAsyncEffect())\n    await delay(2000)\n    act(() => {\n      unmount()\n    })\n    expect(reseted).toBe(1)\n  }, 5000)\n})\n"],"version":3}