{"file":"/Users/jiangwei/projects/lotips/packages/react/test/use-debounce.test.tsx","mappings":";;;AAAA,4DAA8D;AAC9D,oDAAiD;AACjD,wCAAsC;AAEtC,QAAQ,CAAC,cAAc,EAAE;IACvB,IAAI,CAAC,2BAA2B,EAAE;QACxB,IAAA,iHAAM,CAAuD;QACrE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACpC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAC/C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,4DAA4D,EAAE;;;;;oBAC3D,KAAgC,wBAAU,CAAC,cAAM,OAAA,0BAAW,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAA/B,CAA+B,CAAC,EAA/E,MAAM,YAAA,EAAE,iBAAiB,uBAAA,CAAsD;oBACvF,iBAAG,CAAC;wBACF,KAAK,CAAC,EAAE,CAAC;6BACN,IAAI,CAAC,CAAC,CAAC;6BACP,OAAO,CAAC,UAAA,CAAC;4BACR,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;wBAC5B,CAAC,CAAC,CAAA;oBACN,CAAC,CAAC,CAAA;oBACF,qBAAM,aAAK,CAAC,IAAI,CAAC,EAAA;;oBAAjB,SAAiB,CAAA;oBACjB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;oBACrD,qBAAM,aAAK,CAAC,IAAI,CAAC,EAAA;;oBAAjB,SAAiB,CAAA;oBACjB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;oBACpC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;;;;SAC9C,EAAE,IAAI,CAAC,CAAA;AACV,CAAC,CAAC,CAAA","names":[],"sources":["/Users/jiangwei/projects/lotips/packages/react/test/use-debounce.test.tsx"],"sourcesContent":["import { renderHook, act } from '@testing-library/react-hooks'\nimport { useDebounce } from '../src/use-debounce'\nimport { delay } from '../utils/delay'\n\ndescribe('use-debounce', () => {\n  test('default value should work', () => {\n    const { result } = renderHook(() => useDebounce({ defaultValue: 1 }))\n    expect(result.current.value).toBe(1)\n    expect(result.current.debouncedValue).toBe(1)\n  })\n\n  test('value should be react, debounced value should be debounced', async () => {\n    const { result, waitForNextUpdate } = renderHook(() => useDebounce({ interval: 2000 }))\n    act(() => {\n      Array(10)\n        .fill(0)\n        .forEach(v => {\n          result.current.setValue(2)\n        })\n    })\n    await delay(1000)\n    expect(result.current.debouncedValue).toBe(undefined)\n    await delay(2000)\n    expect(result.current.value).toBe(2)\n    expect(result.current.debouncedValue).toBe(2)\n  }, 5000)\n})\n"],"version":3}