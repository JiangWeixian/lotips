{"file":"/Users/jiangwei/projects/lotips/packages/react/src/use-page.ts","mappings":";;;AAAA,+BAA2C;AAC3C,2DAAuD;AACvD,4EAAsC;AACtC,wEAAkC;AAClC,sEAAgC;AAChC,kEAA4B;AAE5B,IAAM,kBAAkB,GAAG,UAAO,KAAkB;IAClD,OAAO,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAA;AAC9F,CAAC,CAAA;AA6BY,QAAA,OAAO,GAAG,UAAO,EAMT;IALnB,IAAA,aAAU,EAAV,+BAAU,EACV,qBAAyB,EAAzB,8CAAyB,EACzB,mBAAgC,EAAhC,qDAAgC,EAChC,eAAc,EAAd,mCAAc,EACd,gFAAQ;IAEF,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuFJ,EAvFK,aAAK,EAAE,gBAuFZ,CAAA;IACF,IAAM,OAAO,GAAG,cAAM,CAAC,yBAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAA;IAC7D,IAAM,eAAe,GAAG,mBAAW,CACjC,UAAC,MAAS;QACR,IAAM,IAAI,yCAAQ,KAAK,CAAC,MAAM,GAAK,MAAM,CAAE,CAAA;QAC3C,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;QACxB,OAAO,CAAC,OAAO,EAAE,CAAA;IACnB,CAAC,EACD,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAC5C,CAAA;IACD,IAAM,sBAAsB,GAAG,mBAAW,CACxC,UAAoB,KAAQ,EAAE,KAAW;;QACvC,IAAM,IAAI,yCAAQ,KAAK,CAAC,MAAM,gBAAG,KAAK,IAAG,KAAK,MAAE,CAAA;QAChD,QAAQ,CAAC,SAAS,CAAC,IAAS,CAAC,CAAA;QAC7B,OAAO,CAAC,OAAO,EAAE,CAAA;IACnB,CAAC,EACD,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,aAAa,CAAC,CAC3D,CAAA;IACD,IAAM,iBAAiB,GAAG,mBAAW,CAAC;QACpC,QAAQ,CAAC,SAAS,CAAC,aAAkB,CAAC,CAAA;QACtC,OAAO,CAAC,OAAO,EAAE,CAAA;IACnB,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAA;IAC/D,IAAM,iBAAiB,GAAG,mBAAW,CAAC;QACpC,QAAQ,CAAC,WAAW,EAAE,CAAA;QACtB,OAAO,CAAC,OAAO,EAAE,CAAA;IACnB,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAA;IAChD,OAAO;QACL,KAAK,OAAA;QACL,QAAQ,wCACH,QAAQ,KACX,eAAe,iBAAA;YACf,iBAAiB,mBAAA;YACjB,iBAAiB,mBAAA;YACjB,sBAAsB,wBAAA,GACvB;KACF,CAAA;AACH,CAAC,CAAA","names":[],"sources":["/Users/jiangwei/projects/lotips/packages/react/src/use-page.ts"],"sourcesContent":["import { useCallback, useRef } from 'react'\nimport { useRematchReducer } from 'use-rematch-reducer'\nimport debounce from 'lodash.debounce'\nimport uniqby from 'lodash.uniqby'\nimport keyby from 'lodash.keyby'\nimport xor from 'lodash.xor'\n\nconst defaultState2Query = <T, F>(state: State<T, F>) => {\n  return { skip: (state.current - 1) * state.limit, limit: state.limit, filter: state.filter }\n}\n\ntype UsePageProps<T, F> = {\n  api(query: { skip: number; limit: number; filter?: F }): Promise<{ data: T[]; total?: number }>\n  defaultFilter?: F\n  state2Query?: (state: State<T, F>) => { skip: number; limit: number; filter?: F }\n  dataKey?: string\n  limit?: number\n}\n\ntype State<T, F> = {\n  /**\n   * original list data from api\n   */\n  data: T[]\n  status?: 'loading' | 'error' | 'loaded'\n  total: number\n  pages: number\n  current: number\n  limit: number\n  ids: string[]\n  filter?: F\n  entries: {\n    [key: string]: T\n  }\n  selected: string[]\n  dataKey: string\n}\n\nexport const usePage = <T, F>({\n  limit = 10,\n  defaultFilter = undefined,\n  state2Query = defaultState2Query,\n  dataKey = 'id',\n  ...props\n}: UsePageProps<T, F>) => {\n  const [state, dispatch] = useRematchReducer({\n    name: 'use-page',\n    state: {\n      data: [],\n      selected: [],\n      ids: [],\n      pages: 0,\n      limit,\n      total: 0,\n      current: 1,\n      dataKey,\n      entries: {},\n      filter: defaultFilter,\n    } as State<T, F>,\n    reducers: {\n      setData(state, payload: { data: T[]; total?: number }) {\n        return {\n          ...state,\n          total: payload.total ?? 0,\n          ids: payload.data.map(v => v[dataKey]),\n          entries: keyby(payload.data, dataKey),\n          pages: (payload.total ?? 0) / state.limit,\n          data: payload.data,\n        }\n      },\n      setSelect(state, payload: string[]) {\n        return {\n          ...state,\n          selected: payload,\n        }\n      },\n      toggleSelect(state, payload: string[]) {\n        return {\n          ...state,\n          selected: xor(state.selected, payload),\n        }\n      },\n      setStatus(state, payload: State<T, F>['status']) {\n        return {\n          ...state,\n          status: payload,\n        }\n      },\n      setCurrent(state, payload: number) {\n        return {\n          ...state,\n          current: payload,\n        }\n      },\n      setFilter(state, payload: F) {\n        return {\n          ...state,\n          filter: payload,\n        }\n      },\n      clearFilter(state, _payload: void) {\n        return {\n          ...state,\n          filter: undefined,\n        }\n      },\n    },\n    effects: {\n      async handleGo(payload: number, _state, state) {\n        this.setStatus('loading')\n        this.setCurrent(payload)\n        try {\n          const { data, total } = await props.api?.(state2Query(state))\n          this.setStatus('loaded')\n          this.setData({ data: uniqby(state.data.concat(data), dataKey), total })\n        } catch (e) {\n          this.setStatus('error')\n        }\n      },\n      async handleNext(_payload: void, _state, state) {\n        this.handleGo(state.current + 1)\n      },\n      async handlePrev(_payload: void, _state, state) {\n        this.handleGo(state.current - 1)\n      },\n      async handleReinit(_payload: void, _state) {\n        this.handleGo(1)\n      },\n      async handleRefresh(_payload: void, _state, state) {\n        this.handleGo(state.current)\n      },\n    },\n  })\n  const refresh = useRef(debounce(dispatch.handleRefresh, 300))\n  const handleSetFilter = useCallback(\n    (filter: F) => {\n      const next = { ...state.filter, ...filter }\n      dispatch.setFilter(next)\n      refresh.current()\n    },\n    [dispatch.setFilter, state.filter, refresh],\n  )\n  const handleSetFilterByField = useCallback(\n    <K extends keyof F>(filed: K, value: F[K]) => {\n      const next = { ...state.filter, [filed]: value }\n      dispatch.setFilter(next as F)\n      refresh.current()\n    },\n    [dispatch.setFilter, state.filter, dispatch.handleRefresh],\n  )\n  const handleResetFilter = useCallback(() => {\n    dispatch.setFilter(defaultFilter as F)\n    refresh.current()\n  }, [dispatch.setFilter, defaultFilter, dispatch.handleRefresh])\n  const handleClearFilter = useCallback(() => {\n    dispatch.clearFilter()\n    refresh.current()\n  }, [dispatch.setFilter, dispatch.handleRefresh])\n  return {\n    state,\n    dispatch: {\n      ...dispatch,\n      handleSetFilter,\n      handleResetFilter,\n      handleClearFilter,\n      handleSetFilterByField,\n    },\n  }\n}\n"],"version":3}