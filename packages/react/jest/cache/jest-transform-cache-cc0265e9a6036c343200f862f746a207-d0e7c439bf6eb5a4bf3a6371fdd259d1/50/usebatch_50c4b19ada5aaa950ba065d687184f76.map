{"file":"/Users/jiangwei/projects/lotips/packages/react/src/use-batch.ts","mappings":";AAAA;;;;;;GAMG;;;AAEH,+BAA2C;AAE3C,IAAM,MAAM,GAAG,EAAuD,CAAA;AAEtE,IAAM,OAAO,GAAG,EAAiC,CAAA;AAEjD,IAAM,QAAQ,GAAG,EAAE,CAAA;AAEnB,IAAM,SAAS,GAAG,UAAgB,IAAY,EAAE,OAAwC;;;;;gBAChF,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;gBACtC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;oBACrB,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAA;oBACrB,sBAAM;iBACP;gBACY,qBAAM,OAAO,CAAC,IAAa,CAAC,EAAA;;gBAAnC,IAAI,GAAG,SAA4B;gBACzC,IAAI,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;oBAChB,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;oBACjC,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;oBACtB,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;wBACxB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAA;oBAChC,CAAC,CAAC,CAAA;gBACJ,CAAC,CAAC,CAAA;gBACF,UAAU,CAAC,cAAM,OAAA,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,EAAxB,CAAwB,EAAE,QAAQ,CAAC,CAAA;;;;KACrD,CAAA;AAEY,QAAA,QAAQ,GAAG,UACtB,IAAY,EACZ,EAAU,EACV,GAAoC;IAE9B,IAAA,uBAA+B,EAA9B,YAAI,EAAE,eAAwB,CAAA;IACrC,iBAAS,CAAC;QACR,IAAI,CAAC,EAAE,EAAE;YACP,OAAM;SACP;QACD,IAAI,OAAO,CAAI,UAAA,OAAO;YACpB,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;YACjC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;YACzC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAClB,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;gBACpB,UAAU,CAAC,cAAM,OAAA,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,EAApB,CAAoB,EAAE,QAAQ,CAAC,CAAA;aACjD;QACH,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAClB,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAA;IAEd,OAAO,IAAI,CAAA;AACb,CAAC,CAAA","names":[],"sources":["/Users/jiangwei/projects/lotips/packages/react/src/use-batch.ts"],"sourcesContent":["/**\n * @description:\n * 在一个列表中可能会出现某个字段为ID，但是我们需要的是这个ID的具体数据；在这个字段数据无法和列表同时populate的时候\n * 这个hook作用在于收集id，然后debounce请求一次并缓存，同时通知所有使用到这个hook的组件更新\n * NOTE:\n * 当然可以收集列表数据时候请求，该hook只是为了使用更方便。\n */\n\nimport { useEffect, useState } from 'react'\n\nconst buffer = {} as { [type: string]: { [key: string]: Function[] } }\n\nconst running = {} as { [type: string]: boolean }\n\nconst interval = 10\n\nconst listByIds = async <D = any>(type: string, fetcher: (ids: string[]) => Promise<D[]>) => {\n  const keys = Object.keys(buffer[type])\n  if (keys.length === 0) {\n    running[type] = false\n    return\n  }\n  const data = await fetcher(keys as any[])\n  keys.forEach((k, i) => {\n    const callbacks = buffer[type][k]\n    delete buffer[type][k]\n    callbacks.forEach(callback => {\n      callback(data[i] || undefined)\n    })\n  })\n  setTimeout(() => listByIds(type, fetcher), interval)\n}\n\nexport const useBatch = <D = any>(\n  type: string,\n  id: string,\n  api: (ids: string[]) => Promise<D[]>,\n) => {\n  const [item, setItem] = useState<D>()\n  useEffect(() => {\n    if (!id) {\n      return\n    }\n    new Promise<D>(resolve => {\n      buffer[type] = buffer[type] || {}\n      buffer[type][id] = buffer[type][id] || []\n      buffer[type][id].push(resolve)\n      if (!running[type]) {\n        running[type] = true\n        setTimeout(() => listByIds(type, api), interval)\n      }\n    }).then(setItem)\n  }, [type, id])\n\n  return item\n}\n"],"version":3}